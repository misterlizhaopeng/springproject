<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">


    <!--1.配置redis连接池的配置-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!--最大空闲数-->
        <property name="maxIdle" value="50"></property>
        <!--最大连接数-->
        <property name="maxTotal" value="100"></property>
        <!--最大等待时间-->
        <property name="maxWaitMillis" value="20000"></property>
    </bean>

    <!--2.配置连接工厂
            注意：spring data redis方案中提供了四种工厂模型，它们都是 RedisConnectionFactory 实现类，具体选择哪一个，
                根据环境测试选择最佳连接工程，此处选择使用最广泛的
                JredisConnectionFactory；
                JedisConnectionFactory；
                LettuceConnectionFactory;
                SrpConnectionFactory
                此时，我们
    -->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="192.168.25.140"></property>
        <property name="port" value="6379"></property>
        <property name="poolConfig" ref="jedisPoolConfig"></property>
        <!--登录redis的验证密码-->
        <property name="password" value="lp"></property>
    </bean>
    <!--3.给redistemplate配置序列化接口
        注意：在spring中，提供了RedisSerializer接口，帮我们序列化、反序列化想redis存储的数据；
        下面的keySerializer是针对key进行序列化，值一般为stringRedisSerializer ；
        下面的valueSerializer是针对value进行序列化，值以为可为多个，stringRedisSerializer，jdkSerializationRedisSerializer；
        一般：jdkSerializationRedisSerializer 用于序列化对象；
        当进行处理字符串类型、整形的时候，jdkSerializationRedisSerializer慎用；


        当处理redisTemplate.opsForHash().increment(key, "f3", 2);
        需要修改默认序列化接口：
            <property name="defaultSerializer" ref="stringRedisSerializer"></property>

    -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"></property>
        <property name="defaultSerializer" ref="stringRedisSerializer"></property>

        <!--hashKeySerializer、hashValueSerializer是对hash的key、value进行序列化的接口-->
    <!--    <property name="hashKeySerializer" ref="stringRedisSerializer"></property>
        <property name="hashValueSerializer" ref="stringRedisSerializer"></property>
-->
        <property name="keySerializer" ref="stringRedisSerializer"></property>
        <property name="valueSerializer" ref="stringRedisSerializer"></property>
    </bean>
    <bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"></bean>
    <bean id="jdkSerializationRedisSerializer" class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"></bean>





    <!--
            配置监听类、监听容器：
            有了这两个部分，才能实现对渠道的监听操作；

    -->
    <bean id="myRedisMessageListener" class="bean.MyRedisMessageListener">
        <property name="redisTemplate" ref="redisTemplate"></property>
    </bean>
    <bean id="myRedisMessageListener2" class="bean.MyRedisMessageListener2">
        <property name="redisTemplate" ref="redisTemplate"></property>
    </bean>
    <bean id="myRedisMessageListener3" class="bean.MyRedisMessageListener3">
        <property name="redisTemplate" ref="redisTemplate"></property>
    </bean>

    <bean id="topicContainer"
          class="org.springframework.data.redis.listener.RedisMessageListenerContainer"
          destroy-method="destroy">
        <!--Redis连接工厂 -->
        <property name="connectionFactory" ref="jedisConnectionFactory" />
        <!--连接池，这里只要线程池生存，才能继续监听 -->
        <property name="taskExecutor">
            <bean
                    class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler">
                <property name="poolSize" value="2" />
            </bean>
        </property>
        <!--消息监听Map -->
        <property name="messageListeners">
            <map>
                <!--配置监听者，key-ref和bean id定义一致 -->
                <!--监听channel1-chat-->
                <entry key-ref="myRedisMessageListener">
                    <!--监听类 -->
                    <bean class="org.springframework.data.redis.listener.ChannelTopic">
                        <constructor-arg value="chat" />
                    </bean>
                </entry>

                <!--监听channel2-chat2-->
                <entry key-ref="myRedisMessageListener2">
                    <!--监听类 -->
                    <bean class="org.springframework.data.redis.listener.ChannelTopic">
                        <constructor-arg value="chat2" />
                    </bean>
                </entry>


                <!--监听channel2-chat2-->
                <entry key-ref="myRedisMessageListener3">
                    <!--监听类 -->
                    <bean class="org.springframework.data.redis.listener.ChannelTopic">
                        <constructor-arg value="chat3" />
                    </bean>
                </entry>
            </map>
        </property>
    </bean>

</beans>